-1.	Using a socket connection, a client program will query a server remote server listening on port 80.
-2.	The address of the server to be queried by the client shall be given as a command line argument.
-3.	The operation of the client once it is run is to wait for the user to enter queries,
    which it then forwards to the server in a loop until the user types ‘quit’ any responses from the server are immediately displayed to the user.
-4.	The client will report the time taken for the server to respond to each query together with the server’s response.
?5.	The client is non-blocking. An infinite number of server queries may be outstanding.
6.	The server will spawn a new process to handle each new request and be able to accept multiple clients
7.	The source code shall be portable so that it can be compiled and run on Unix and Visual Studio.


8.	The following query commands with options are recognised by the server (anything within [] is optional):
    A.	list [-l] [-f] [pathname] [localfile]
        - list the files in the current or given directory to the screen or print them to a file.
        Options: –l = long list, -f force overwrite
    B.	get filepath [-f] [localfile] - print the content of a nominated file to screen or given file
    C.	put localfile [-f] [newname] - create a remote copy of a local file with same or other name
    D.	sys			- return the name /version of the Operating System and CPU type
    E.	delay integer		- returns the given integer after a delay of ‘integer’ seconds.

9.	The long listing option of the list commands will also return the file size, owner, creation date and access permissions.
    If no pathname is given then the contents of the current directly will be returned.
    The list command will either dump the directory listing to the screen 40 lines at a time and pause waiting for a key to be pressed before displaying the next 40 lines etc, or it will save the listing to a local file if given. If local file already exists an error will result.
10.	The put command will create a remote file with the same name or a new name is one is specified.
    If the remote filename exists the server will return an error.
11.	The –f option will force an existing file to be overwritten if it exists and advise the user whether or not a file was overwritten.
12.	If no filename argument is given, the get command will dump the contents of the remote file to the screen 40 lines at a time and pause waiting for a key to be pressed before displaying the next 40 lines etc. Otherwise it will create a new local file with the given filename. If a file with that name already exists the client will return an error before sending the get request to the server.
13.	All commands shall accept both relative and absolute path names for the local and remote paths.
14.	The delay command will cause the server to sleep for the specified interval for the given request without affecting any other requestes being processed.
15.	The client shall be able to redirect output to other processes using the ‘|’ argument.
    What this does is that the client calls the nominated process passing to it the data returned from the server and then prints out the result to the screen.
    You must not use the system() call.
o	get remotefile | grep name		> get remotefile | findstr name
o	list | sort  				> list | sort
16.	If the server receives an incorrectly specified command it will return an error.
    If the server is unable to execute a valid command the server will return the error string generated by the operating system to the client
?17.	All Zombies are removed when the server shuts down.
